import { useState, useEffect } from "react"
import { useTranslation } from "react-i18next"
import Head from "next/head"
import CustomButton from "components/User/Button"
import UserSecondaryLayout from "layout/User/UserSecondaryLayout"
import FilterBar from "../components/filterBar/FilterBar"
import ListServices from "./section/ListServices/ListServices"
import InputCustom from "components/Common/Input"
import { HiMagnifyingGlass } from "react-icons/hi2"
import CheckBoxCustom from "components/Common/Checkbox"
import { useGetAllSpecializationQuery } from "hooks/query/service/useService"
import { Specialization } from "types/Service"
import useDebounce from "hooks/useDebounce"
import { IBreadcrum } from "types/Base.type"
import { t } from "i18next"

interface SpecializationWithChecked extends Specialization {
  checked: boolean
}

const breadrums: IBreadcrum[] = [
  { label: t("base:pages.home"), href: "/" },
  { label: t("base:pages.servies") }
]

const ServicesPage = () => {
  const { t } = useTranslation(["base", "ser"])
  const { data } = useGetAllSpecializationQuery({
    pageNumber: 1,
    pageSize: 100
  })
  const specializations: Specialization[] = data?.data?.data as Specialization[]

  const [specializationsState, setSpecializationsState] = useState<
    SpecializationWithChecked[]
  >([])
  const [initialSpecializationsState, setInitialSpecializationsState] =
    useState<SpecializationWithChecked[]>([])

  const [specializationIds, setSpecializationIds] = useState([])

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = event.target

    setSpecializationsState((prevState) =>
      prevState.map((specialization) =>
        specialization.specializationID === name
          ? { ...specialization, checked }
          : specialization
      )
    )
    setSpecializationIds((prevState) => {
      let updatedIds = [...prevState] // Create a new array with the values from prevState

      const index = updatedIds.indexOf(name as never)
      if (index !== -1) {
        // If name exists in prevState, remove it
        updatedIds.splice(index, 1)
      } else {
        // If name doesn't exist in prevState, add it
        updatedIds.push(name as never)
      }
      return updatedIds
    })
  }

  const [searchValue, setSearchValue] = useState("")
  const searchTextDebounce = useDebounce(searchValue, 1000)
  const [showFilter, setShowFilter] = useState(false)
  const handleReset = () => {
    setSearchValue("")
    setSpecializationsState(initialSpecializationsState)
    setSpecializationIds([])
  }
  useEffect(() => {
    if (typeof window !== "undefined" && window.innerWidth > 768) {
      setShowFilter(true)
    }
    if (specializations) {
      setSpecializationsState(
        specializations.map((specialization) => ({
          ...specialization,
          checked: false
        }))
      )
      setInitialSpecializationsState(
        specializations.map((specialization) => ({
          ...specialization,
          checked: false
        }))
      )
    }
  }, [specializations])

  return (
    <>
      <Head>
        <title>Forum page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/images/favicon.png" />
      </Head>
      <UserSecondaryLayout breadrums={breadrums}>
        <div className="grid grid-cols-3 gap-2 mt-6 md:mt-10 md:gap-7 md:hidden">
          <div className="col-span-3 md:hidden">
            <CustomButton
              kind="secondary"
              size="small"
              className="h-10 mx-auto w-[140px] rounded-[3px]"
              onClick={() => setShowFilter((prevShowFilter) => !prevShowFilter)}
            >
              <div className="flex items-center gap-2">
                <span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    strokeWidth="1.5"
                    stroke="currentColor"
                    className="w-6 h-6"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M10.5 6h9.75M10.5 6a1.5 1.5 0 11-3 0m3 0a1.5 1.5 0 10-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-9.75 0h9.75"
                    />
                  </svg>
                </span>
                <span>Bộ lọc</span>
              </div>
            </CustomButton>
          </div>
        </div>
        <div className="flex mt-6 md:mt-10 ">
          <FilterBar
            show={showFilter}
            onClose={() => setShowFilter((prevShowFilter) => !prevShowFilter)}
          >
            <div className="space-y-2">
              <h3>{t("ser:search.label")}</h3>
              <InputCustom
                icon={<HiMagnifyingGlass />}
                className="w-full md:max-w-[412px]"
                placeholder={t("ser:search.input")}
                onChange={(e) => setSearchValue(e.target.value)}
                value={searchValue}
              />
            </div>
            <div className="space-y-2">
              <h3>{t("ser:specialist.label")}</h3>
              <div className="flex flex-col">
                {specializationsState.length > 0 ? (
                  specializationsState.map((specialization) => (
                    <CheckBoxCustom
                      key={specialization.specializationID}
                      name={specialization.specializationID}
                      label={specialization.specializationName}
                      checked={specialization.checked}
                      onChange={handleChange}
                    />
                  ))
                ) : (
                  <p>System does not have any specializations!</p>
                )}
              </div>
            </div>
            <CustomButton
              kind="primary"
              size="small"
              className="h-10 rounded-[3px]"
              onClick={handleReset}
            >
              <div className="flex items-center gap-2">
                <span>{t("ser:btn")}</span>
              </div>
            </CustomButton>
          </FilterBar>
          <div className="flex-1 md:ml-16">
            <ListServices
              searchText={searchTextDebounce}
              specializationIDs={specializationIds}
            />
          </div>
        </div>
      </UserSecondaryLayout>
    </>
  )
}

export default ServicesPage
